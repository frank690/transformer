"""
This moduel contains test for the head and heads class.
"""

from contextlib import nullcontext

import pytest
import torch
import torch.nn as nn

from transformer.model.head import Head, Heads


class TestHead:
    """
    This class contains all the tests for the Head class.
    """

    @pytest.mark.parametrize(
        "embedding_dimension, head_size, block_size, dropout, block_future_tokens, expected_error",
        [
            (-1, 42, 42, 0.1, True, RuntimeError),
            (42, -1, 42, 0.1, True, RuntimeError),
            (42, 42, 42, -1, True, ValueError),
            (42, 42, 42, 1.5, True, ValueError),
            (42, 42, -1, 0.1, True, RuntimeError),
            (42, 42, 42, 0.1, True, None),
            (42, 42, 42, 0.1, False, None),
            (42, 42, 42, 1, True, None),
            (42, 42, 42, 1, False, None),
            (42, 42, 42, 0, True, None),
            (42, 42, 42, 0, False, None),
        ],
    )
    def test_init(
        self,
        embedding_dimension: int,
        head_size: int,
        block_size: int,
        dropout: float,
        block_future_tokens: bool,
        expected_error: Exception,
    ):
        """
        Tests the __init__ method.
        """
        with pytest.raises(
            expected_error
        ) if expected_error is not None else nullcontext():
            head = Head(
                embedding_dimension=embedding_dimension,
                head_size=head_size,
                block_size=block_size,
                dropout=dropout,
                block_future_tokens=block_future_tokens,
            )

            assert head.embedding_dimension == embedding_dimension
            assert head.block_future_tokens == block_future_tokens

            assert isinstance(head.dropout, nn.Dropout)
            assert isinstance(head.key, nn.Linear)
            assert isinstance(head.value, nn.Linear)
            assert isinstance(head.query, nn.Linear)

            assert head.key.weight.shape == (embedding_dimension, head_size)
            assert head.query.weight.shape == (embedding_dimension, head_size)
            assert head.value.weight.shape == (embedding_dimension, head_size)

            if block_future_tokens:
                assert head.future_tokens_mask is not None
                assert head.future_tokens_mask.shape == (block_size, block_size)

    @pytest.mark.parametrize(
        "data, key_weight, query_weight, value_weight, block_future_tokens, expected_result",
        [
            (
                torch.tensor(
                    [
                        [
                            [0.3330, 1.9858, -0.0858, 0.4713, -0.9802, 1.9269],
                            [2.2074, -0.5580, 1.4589, 0.1832, -1.2568, -1.7681],
                            [1.1130, -0.4713, 1.8502, 0.3376, 1.1673, -0.2218],
                            [0.4923, 0.6742, 0.8552, -0.6317, 0.9737, -0.6613],
                            [0.0629, 1.6542, 1.1793, -0.7005, 0.5463, 0.0325],
                        ],
                        [
                            [0.4807, 1.2026, -0.2642, -0.7697, -0.3053, 1.2219],
                            [0.6308, 0.1457, 1.0229, 1.0357, 0.0156, -1.5063],
                            [-0.3996, 1.5518, -0.4679, -0.3262, 1.7481, -1.8880],
                            [2.0130, -0.7879, -0.8052, 0.2458, -0.7617, -0.7987],
                            [0.0297, -0.6452, 1.2956, 0.9499, -0.5989, -0.7235],
                        ],
                        [
                            [1.6241, 1.3650, 0.0637, -1.6627, 0.1033, -0.8138],
                            [1.2102, 0.6787, -1.3202, 0.3751, -0.3625, 0.3320],
                            [-1.6968, -0.5215, 0.8242, -0.3240, 0.6883, 1.8648],
                            [-0.2893, -1.2737, 0.5076, 0.4784, -0.6710, 0.1032],
                            [0.0694, -1.7223, -0.3018, -3.2539, -0.2171, 1.1124],
                        ],
                        [
                            [-0.4875, 0.7806, -0.5879, -0.5683, -0.3418, 0.2115],
                            [-1.0207, -1.0546, 1.4572, 0.5222, 1.7854, -0.6355],
                            [-0.0518, -0.7737, 1.4281, -2.3348, -2.2866, 1.0489],
                            [-0.0606, -0.9732, -0.2394, 0.7130, 0.3631, -0.3435],
                            [-1.2204, -1.7599, 0.2361, 0.5556, -0.5292, 0.6915],
                        ],
                    ]
                ),
                torch.tensor(
                    [
                        [-0.0847, 0.2943, -0.0019, -0.0114, -0.2051, -0.1034],
                        [-0.1512, -0.3815, 0.3506, 0.1233, 0.1855, 0.0767],
                        [0.3111, 0.3398, -0.1590, 0.2135, -0.3924, -0.3156],
                        [0.0718, -0.2547, -0.2964, -0.0687, 0.0109, 0.3899],
                        [-0.2458, -0.3987, -0.2298, 0.1338, -0.2004, -0.3174],
                        [0.2693, -0.4034, -0.1167, 0.2556, -0.4001, -0.0281],
                        [-0.2618, 0.3992, -0.0514, 0.2603, -0.0666, 0.2308],
                    ],
                    requires_grad=True,
                ),
                torch.tensor(
                    [
                        [-0.3847, -0.0018, 0.1949, -0.2107, -0.0013, 0.3336],
                        [-0.1377, -0.1441, -0.0024, 0.1124, 0.1255, 0.3042],
                        [-0.2105, 0.1743, 0.3947, -0.1595, 0.0536, -0.2282],
                        [0.3735, 0.1647, -0.3587, 0.0008, 0.0360, -0.2114],
                        [-0.0306, 0.2299, -0.3365, 0.2864, 0.2820, -0.3611],
                        [-0.2510, -0.1015, -0.2197, -0.0544, 0.0920, -0.2140],
                        [-0.1433, 0.2234, 0.2437, -0.1278, 0.3362, -0.3302],
                    ],
                    requires_grad=True,
                ),
                torch.tensor(
                    [
                        [0.1407, 0.0900, 0.0776, 0.3788, -0.2439, -0.3058],
                        [0.2699, 0.2201, 0.0887, -0.2110, 0.1912, -0.1428],
                        [-0.3591, -0.2422, -0.1648, 0.1434, -0.3156, -0.3888],
                        [0.3253, -0.3122, 0.0681, 0.1909, -0.3488, 0.3863],
                        [0.1490, 0.2168, -0.3871, 0.3082, 0.0692, 0.3318],
                        [-0.2914, -0.1336, 0.1449, 0.2265, 0.3232, -0.2035],
                        [-0.2074, 0.2738, 0.1266, 0.1393, -0.1313, 0.0470],
                    ],
                    requires_grad=True,
                ),
                True,
                torch.tensor(
                    [
                        [
                            [
                                4.7292e-02,
                                -4.2673e-02,
                                -9.5863e-01,
                                6.5873e-01,
                                1.2301e00,
                                -9.7694e-01,
                                7.4871e-01,
                            ],
                            [
                                4.2312e-01,
                                1.4436e-01,
                                -6.0453e-01,
                                6.9598e-01,
                                5.6365e-01,
                                -7.9105e-01,
                                4.2602e-01,
                            ],
                            [
                                3.6439e-01,
                                2.5779e-01,
                                -6.5444e-01,
                                5.6448e-01,
                                2.4628e-01,
                                -4.3478e-01,
                                2.3624e-01,
                            ],
                            [
                                2.8276e-01,
                                3.1924e-01,
                                -6.4517e-01,
                                3.5288e-01,
                                2.2170e-01,
                                -4.2011e-01,
                                2.4424e-01,
                            ],
                            [
                                1.5856e-01,
                                4.0074e-01,
                                -7.2368e-01,
                                1.0007e-01,
                                1.6457e-01,
                                -3.6395e-01,
                                3.1467e-01,
                            ],
                        ],
                        [
                            [
                                -4.3539e-01,
                                3.0054e-01,
                                -9.0944e-01,
                                1.9448e-01,
                                5.8169e-01,
                                -8.6070e-01,
                                1.8644e-01,
                            ],
                            [
                                2.6705e-01,
                                2.9673e-01,
                                -3.3037e-01,
                                2.4481e-02,
                                8.7322e-02,
                                -2.1285e-01,
                                1.4980e-01,
                            ],
                            [
                                2.7028e-01,
                                4.3666e-01,
                                -2.1188e-01,
                                -4.9915e-01,
                                -6.4482e-03,
                                6.3301e-02,
                                1.3112e-01,
                            ],
                            [
                                2.9105e-01,
                                3.7402e-01,
                                -1.5704e-01,
                                -4.4808e-02,
                                1.4417e-01,
                                -2.6734e-01,
                                -1.4178e-01,
                            ],
                            [
                                4.0805e-01,
                                3.2774e-01,
                                1.1041e-02,
                                -2.7761e-01,
                                -9.7178e-02,
                                8.3686e-02,
                                -8.6263e-04,
                            ],
                        ],
                        [
                            [
                                -4.9878e-02,
                                1.2312e00,
                                -8.7894e-01,
                                -5.6129e-01,
                                -2.6205e-01,
                                -8.2402e-01,
                                -2.3849e-01,
                            ],
                            [
                                1.1978e-01,
                                6.4235e-01,
                                -5.8309e-01,
                                -2.1332e-02,
                                4.5529e-01,
                                -7.7459e-01,
                                -1.7143e-01,
                            ],
                            [
                                -2.4025e-01,
                                5.3815e-01,
                                -6.3461e-01,
                                -1.7766e-01,
                                6.7594e-02,
                                -4.8249e-01,
                                -8.4233e-02,
                            ],
                            [
                                -1.8635e-01,
                                1.7315e-01,
                                -3.2537e-01,
                                7.8452e-02,
                                7.7805e-03,
                                -2.6231e-01,
                                -5.1161e-02,
                            ],
                            [
                                -4.2385e-01,
                                3.3632e-01,
                                -4.5384e-01,
                                2.6635e-02,
                                -1.3351e-01,
                                -4.6790e-01,
                                -2.1439e-01,
                            ],
                        ],
                        [
                            [
                                -2.4057e-01,
                                1.2464e-02,
                                2.6986e-02,
                                -3.4988e-01,
                                1.9554e-01,
                                -3.2967e-01,
                                2.1606e-01,
                            ],
                            [
                                -2.1139e-01,
                                -1.5531e-02,
                                7.3034e-02,
                                -4.8086e-01,
                                -2.3803e-01,
                                4.0351e-01,
                                9.4044e-02,
                            ],
                            [
                                -3.5732e-01,
                                -6.0937e-02,
                                2.4261e-02,
                                8.7042e-02,
                                -5.5338e-01,
                                -2.2919e-01,
                                7.5239e-02,
                            ],
                            [
                                -1.9601e-01,
                                -1.2888e-01,
                                1.4930e-01,
                                3.4317e-02,
                                -5.2467e-01,
                                2.2464e-01,
                                -5.1793e-02,
                            ],
                            [
                                -2.2606e-01,
                                -2.5250e-01,
                                2.2806e-01,
                                1.2609e-01,
                                -5.6611e-01,
                                2.7891e-01,
                                -3.7308e-02,
                            ],
                        ],
                    ]
                ),
            ),
            (
                torch.tensor(
                    [
                        [
                            [0.3330, 1.9858, -0.0858, 0.4713, -0.9802, 1.9269],
                            [2.2074, -0.5580, 1.4589, 0.1832, -1.2568, -1.7681],
                            [1.1130, -0.4713, 1.8502, 0.3376, 1.1673, -0.2218],
                            [0.4923, 0.6742, 0.8552, -0.6317, 0.9737, -0.6613],
                            [0.0629, 1.6542, 1.1793, -0.7005, 0.5463, 0.0325],
                        ],
                        [
                            [0.4807, 1.2026, -0.2642, -0.7697, -0.3053, 1.2219],
                            [0.6308, 0.1457, 1.0229, 1.0357, 0.0156, -1.5063],
                            [-0.3996, 1.5518, -0.4679, -0.3262, 1.7481, -1.8880],
                            [2.0130, -0.7879, -0.8052, 0.2458, -0.7617, -0.7987],
                            [0.0297, -0.6452, 1.2956, 0.9499, -0.5989, -0.7235],
                        ],
                        [
                            [1.6241, 1.3650, 0.0637, -1.6627, 0.1033, -0.8138],
                            [1.2102, 0.6787, -1.3202, 0.3751, -0.3625, 0.3320],
                            [-1.6968, -0.5215, 0.8242, -0.3240, 0.6883, 1.8648],
                            [-0.2893, -1.2737, 0.5076, 0.4784, -0.6710, 0.1032],
                            [0.0694, -1.7223, -0.3018, -3.2539, -0.2171, 1.1124],
                        ],
                        [
                            [-0.4875, 0.7806, -0.5879, -0.5683, -0.3418, 0.2115],
                            [-1.0207, -1.0546, 1.4572, 0.5222, 1.7854, -0.6355],
                            [-0.0518, -0.7737, 1.4281, -2.3348, -2.2866, 1.0489],
                            [-0.0606, -0.9732, -0.2394, 0.7130, 0.3631, -0.3435],
                            [-1.2204, -1.7599, 0.2361, 0.5556, -0.5292, 0.6915],
                        ],
                    ]
                ),
                torch.tensor(
                    [
                        [-0.0847, 0.2943, -0.0019, -0.0114, -0.2051, -0.1034],
                        [-0.1512, -0.3815, 0.3506, 0.1233, 0.1855, 0.0767],
                        [0.3111, 0.3398, -0.1590, 0.2135, -0.3924, -0.3156],
                        [0.0718, -0.2547, -0.2964, -0.0687, 0.0109, 0.3899],
                        [-0.2458, -0.3987, -0.2298, 0.1338, -0.2004, -0.3174],
                        [0.2693, -0.4034, -0.1167, 0.2556, -0.4001, -0.0281],
                        [-0.2618, 0.3992, -0.0514, 0.2603, -0.0666, 0.2308],
                    ],
                    requires_grad=True,
                ),
                torch.tensor(
                    [
                        [-0.3847, -0.0018, 0.1949, -0.2107, -0.0013, 0.3336],
                        [-0.1377, -0.1441, -0.0024, 0.1124, 0.1255, 0.3042],
                        [-0.2105, 0.1743, 0.3947, -0.1595, 0.0536, -0.2282],
                        [0.3735, 0.1647, -0.3587, 0.0008, 0.0360, -0.2114],
                        [-0.0306, 0.2299, -0.3365, 0.2864, 0.2820, -0.3611],
                        [-0.2510, -0.1015, -0.2197, -0.0544, 0.0920, -0.2140],
                        [-0.1433, 0.2234, 0.2437, -0.1278, 0.3362, -0.3302],
                    ],
                    requires_grad=True,
                ),
                torch.tensor(
                    [
                        [0.1407, 0.0900, 0.0776, 0.3788, -0.2439, -0.3058],
                        [0.2699, 0.2201, 0.0887, -0.2110, 0.1912, -0.1428],
                        [-0.3591, -0.2422, -0.1648, 0.1434, -0.3156, -0.3888],
                        [0.3253, -0.3122, 0.0681, 0.1909, -0.3488, 0.3863],
                        [0.1490, 0.2168, -0.3871, 0.3082, 0.0692, 0.3318],
                        [-0.2914, -0.1336, 0.1449, 0.2265, 0.3232, -0.2035],
                        [-0.2074, 0.2738, 0.1266, 0.1393, -0.1313, 0.0470],
                    ],
                    requires_grad=True,
                ),
                False,
                torch.tensor(
                    [
                        [
                            [
                                1.3814e-01,
                                5.7309e-01,
                                -6.8873e-01,
                                -1.3673e-01,
                                -2.5071e-01,
                                -3.0847e-02,
                                1.0847e-01,
                            ],
                            [
                                1.4814e-01,
                                4.6968e-01,
                                -7.1009e-01,
                                8.0277e-03,
                                -6.5568e-03,
                                -2.1694e-01,
                                2.1990e-01,
                            ],
                            [
                                1.4423e-01,
                                4.7908e-01,
                                -7.1234e-01,
                                -1.3287e-02,
                                -1.8616e-02,
                                -2.1605e-01,
                                2.2787e-01,
                            ],
                            [
                                1.9378e-01,
                                4.0259e-01,
                                -6.9709e-01,
                                1.3542e-01,
                                1.2558e-01,
                                -3.4705e-01,
                                2.7990e-01,
                            ],
                            [
                                1.5856e-01,
                                4.0074e-01,
                                -7.2368e-01,
                                1.0007e-01,
                                1.6457e-01,
                                -3.6395e-01,
                                3.1467e-01,
                            ],
                        ],
                        [
                            [
                                3.1533e-01,
                                3.4121e-01,
                                -7.0079e-02,
                                -2.9708e-01,
                                -3.8042e-02,
                                2.0113e-02,
                                1.6788e-02,
                            ],
                            [
                                4.1278e-01,
                                2.9958e-01,
                                6.3571e-03,
                                -1.3047e-01,
                                -5.8487e-02,
                                -1.0004e-02,
                                -4.7938e-02,
                            ],
                            [
                                5.1711e-01,
                                2.2142e-01,
                                8.3766e-02,
                                1.6968e-01,
                                -5.8770e-02,
                                -1.0849e-01,
                                -1.3939e-01,
                            ],
                            [
                                3.7649e-01,
                                2.6698e-01,
                                -3.3909e-02,
                                3.5707e-02,
                                7.8961e-03,
                                -1.4318e-01,
                                -8.8689e-02,
                            ],
                            [
                                4.0805e-01,
                                3.2774e-01,
                                1.1041e-02,
                                -2.7761e-01,
                                -9.7178e-02,
                                8.3686e-02,
                                -8.6263e-04,
                            ],
                        ],
                        [
                            [
                                -3.7613e-01,
                                1.5416e-01,
                                -3.4315e-01,
                                2.0640e-01,
                                5.0674e-02,
                                -4.6070e-01,
                                -2.1372e-01,
                            ],
                            [
                                -9.8373e-01,
                                -6.5575e-02,
                                -2.7478e-01,
                                3.1964e-01,
                                -4.3002e-01,
                                -3.9284e-01,
                                -3.9425e-01,
                            ],
                            [
                                -2.7461e-01,
                                3.1046e-01,
                                -4.0270e-01,
                                2.4628e-02,
                                -8.5968e-02,
                                -3.9173e-01,
                                -1.4351e-01,
                            ],
                            [
                                -4.8108e-01,
                                1.5862e-01,
                                -3.3779e-01,
                                1.4626e-01,
                                -1.6936e-01,
                                -3.8104e-01,
                                -2.1706e-01,
                            ],
                            [
                                -4.2385e-01,
                                3.3632e-01,
                                -4.5384e-01,
                                2.6635e-02,
                                -1.3351e-01,
                                -4.6790e-01,
                                -2.1439e-01,
                            ],
                        ],
                        [
                            [
                                -2.1234e-01,
                                -3.0153e-01,
                                2.6625e-01,
                                2.1491e-01,
                                -4.3394e-01,
                                1.2222e-01,
                                -2.2332e-02,
                            ],
                            [
                                -1.8818e-01,
                                -2.8106e-01,
                                2.6374e-01,
                                1.2755e-01,
                                -3.5878e-01,
                                1.7385e-01,
                                -1.5036e-02,
                            ],
                            [
                                -2.8817e-01,
                                -1.3712e-01,
                                1.1053e-01,
                                1.2778e-01,
                                -4.7632e-01,
                                -1.1526e-01,
                                3.3529e-02,
                            ],
                            [
                                -1.9299e-01,
                                -3.4569e-01,
                                3.0972e-01,
                                2.0402e-01,
                                -4.6731e-01,
                                2.7722e-01,
                                -4.3870e-02,
                            ],
                            [
                                -2.2606e-01,
                                -2.5250e-01,
                                2.2806e-01,
                                1.2609e-01,
                                -5.6611e-01,
                                2.7891e-01,
                                -3.7308e-02,
                            ],
                        ],
                    ]
                ),
            ),
        ],
    )
    def test_forward(
        self,
        data: torch.Tensor,
        key_weight: torch.Tensor,
        query_weight: torch.Tensor,
        value_weight: torch.Tensor,
        block_future_tokens: bool,
        expected_result: torch.Tensor,
    ):
        """
        Tests the forward method.
        """
        block_size = 1337
        head_size, embedding_size = key_weight.shape

        head = Head(
            embedding_dimension=embedding_size,
            head_size=head_size,
            block_size=block_size,
            dropout=0,
            block_future_tokens=block_future_tokens,
        )

        head.key.weight = nn.Parameter(key_weight)
        head.query.weight = nn.Parameter(query_weight)
        head.value.weight = nn.Parameter(value_weight)

        result = head.forward(data)
        assert torch.all(torch.isclose(result, expected_result, atol=1e-4))
